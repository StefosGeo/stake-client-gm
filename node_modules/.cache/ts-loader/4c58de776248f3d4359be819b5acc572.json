{"remainingRequest":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js!/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js??ref--14-2!/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/george/projects/gem-farm-chimps-v2/src/views/Home.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/george/projects/gem-farm-chimps-v2/src/views/Home.vue","mtime":1651785067277},{"path":"/home/george/projects/gem-farm-chimps-v2/babel.config.js","mtime":1651784671821},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js","mtime":1648666880284},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js","mtime":1648666885109},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js","mtime":1648666889180}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/george/projects/gem-farm-chimps-v2/src/views/Home.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, nextTick, onMounted, ref, watch } from 'vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster, { BankAddr } from '@/composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport FarmerDisplay from '@/components/gem-farm/FarmerDisplay.vue';\nimport Vault from '@/components/gem-bank/Vault.vue';\nimport { INFT } from '@/common/web3/NFTget';\nimport { findFarmerPDA, stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\nimport Modal from \"@/components/Modal.vue\";\n\nexport default defineComponent({\n  components: { Vault, FarmerDisplay, ConfigPane, Modal},\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n    const widthdrawNFTs = ref(false);\n    const modalActive = ref(false);\n    const modalGood = ref(false);\n    const modalBad = ref(false);\n    const modalNeutral = ref(false);\n    const modalShowWheel = ref(false);\n    const modalShowClosebutton = ref(false);\n\n    const toggleModal = () => {\n      modalActive.value = !modalActive.value;\n    };\n\n    const showModal = () => {\n      modalActive.value = true;\n    };\n\n    const hideModal = () => {\n      modalActive.value = false;\n    };\n\n    const setModalContent = (header:string, content:string, style:string, showClose:boolean, showWheel:boolean) => {\n        modalGood.value = false;\n        modalBad.value = false;\n        modalNeutral.value = false;\n\n        ModalHeader.value = header;\n        ModalMessage.value = content; \n\n        modalShowClosebutton.value = showClose;\n        modalShowWheel.value = showWheel;\n\n        if(style == 'modal-good')\n                modalGood.value = true\n        if(style == 'modal-bad')\n                modalBad.value = true\n        if(style == 'modal-neutral')\n                modalNeutral.value = true\n\n\n    };\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      await freshStart();\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      await freshStart();\n    });\n\n    // --------------------------------------- farmer details\n    const farm = ref<string>();\n    const farmAcc = ref<any>();\n    const ModalMessage  = ref<string>();    \n    const ModalHeader  = ref<string>();  \n    const accruedReward  = ref<string>();\n    const paidOutReward = ref<string>();    \n    const fixedRate = ref<number>();    \n    const estFixedRate = ref<number>();\n    const estRewards = ref<number>();\n\n    const farmerIdentity = ref<string>();\n    const farmerAcc = ref<any>();\n    const farmerState = ref<string>();\n\n    const availableA = ref<string>();\n    const accruedA = ref<string>();\n    const availableB = ref<string>();\n\n    const VaultRef = ref<any>(null);\n\n    const totalAccounts = ref<number>();\n    const totalStakedAccounts = ref<number>();    \n    const totalNFTsStaked = ref<number>();    \n    const totalNFTs = ref<number>();    \n    const farmerbeginStakingTs = ref<string>();\n\n    //auto loading for when farm changes\n    watch(farm, async () => {\n      await freshStart();\n    });\n\n    const updateAvailableRewards = async () => {\n      accruedReward.value = farmerAcc.value.rewardA.accruedReward.toString();\n      paidOutReward.value = farmerAcc.value.rewardA.paidOutReward.toString();     \n      fixedRate.value = (farmerAcc.value.rewardA.fixedRate.promisedSchedule.baseRate * farmerAcc.value.rarityPointsStaked.words[0]);\n      estFixedRate.value = Math.floor((Date.now()/1000 - farmerAcc.value.minStakingEndsTs) * (fixedRate.value / 1000000000)/604799);\n      estRewards.value = Math.floor(((Date.now()/1000) - farmerAcc.value.rewardA.fixedRate.lastUpdatedTs) * (fixedRate.value / 1000000000 / 7 / 24 / 60 / 60))\n      availableA.value = farmerAcc.value.rewardA.accruedReward\n        .sub(farmerAcc.value.rewardA.paidOutReward)\n        .toString();\n      availableB.value = farmerAcc.value.rewardB.accruedReward\n        .sub(farmerAcc.value.rewardB.paidOutReward)\n        .toString();   \n     \n      totalNFTs.value = 10000;\n      farmerbeginStakingTs.value = farmerAcc.value.rewardA.fixedRate.beginStakingTs\n      \n    };\n\n    const fetchFarn = async () => {   \n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));  \n        totalAccounts.value = farmAcc.value.farmerCount;\n        totalStakedAccounts.value = farmAcc.value.stakedFarmerCount\n        totalNFTsStaked.value = farmAcc.value.gemsStaked      \n    };\n\n    const fetchFarmer = async () => {\n      const [farmerPDA] = await findFarmerPDA(\n        new PublicKey(farm.value!),\n        getWallet()!.publicKey!\n      );\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\n      await updateAvailableRewards();\n      console.log(\n        `farmer found at ${farmerIdentity.value}:`,\n        stringifyPKsAndBNs(farmerAcc.value)\n      );\n    };\n\n    const freshStart = async () => {\n      //  setModalContent(\"Welcome to Lux Metaverse Staking\", \"We are actively updating this interface/staking solution. But please note before staking to make sure all your NFT's are in the Target Vault before staking. The act of clicking 'Start Staking' will lock this NFT for 7 days in this vault you will not be able to unstake during this time.\", \"modal-neutral\", true, false);     \n      //    showModal();\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n        farm.value = BankAddr.LUX;\n\n        //reset stuff\n        farmAcc.value = undefined;\n        farmerAcc.value = undefined;\n        farmerState.value = undefined;\n        availableA.value = undefined;\n        availableB.value = undefined;\n        widthdrawNFTs.value = false;\n\n        try {          \n          await fetchFarn();\n          await fetchFarmer();\n           setInterval(function () {\n              fetchFarn();\n              fetchFarmer();\n          }, 600000);\n        } catch (e) {\n          console.log(`farm with PK ${farm.value} not found :(`);\n        }\n      }\n    };\n\n    const initFarmer = async () => {      \n          try\n          {           \n            setModalContent(\"Submitting Transaction\", \"Creating new staking account: Transaction in Progress\", \"modal-neutral\", false, true);    \n             showModal();\n              await gf.initFarmerWallet(new PublicKey(farm.value!));  \n              await fetchFarmer();\n          }\n          catch(ex: unknown)\n          {      \n             let message = 'Unknown Error: Please try again. If the problem continues, please reach out to the site admin'\n              if (ex instanceof Error) {\n                hideModal();\n                message = ex.message;\n                if(message.includes(\"0x1770\"))\n                {\n                message = \"Transaction Failed: Compute limit(200000) reached. \";\n                }\n                if(message.includes(\"0x1\"))\n                {\n                message = \"Please make sure you have at least .05 Sol in your account to cover rental and transaction fees\";\n                }\n                if(message.includes(\"0x1784\"))\n                {\n                message = \"Vault is Locked. Please try again after the minimum staking peroid has completed \";\n                }\n                \n                showModal();\n                setModalContent(\"There was a problem\", message , \"modal-bad\", true, false);\n                }\n          }          \n    };\n\n    // --------------------------------------- staking\n    const beginStaking = async () => {\n\n      try\n      {\n        showModal();\n        setModalContent(\"Submitting Transaction\", \"Transaction in Progress\", \"modal-neutral\", false, true);     \n          if((VaultRef.value.desiredVaultNFTs.length >= VaultRef.value.currentVaultNFTs.length && VaultRef.value.desiredVaultNFTs.length > 0))\n          {\n            await VaultRef.value.moveNFTsOnChain();\n            await gf.stakeWallet(new PublicKey(farm.value!));\n            hideModal();\n          }\n          else\n          {\n            if((VaultRef.value.desiredVaultNFTs.length - VaultRef.value.currentVaultNFTs.length) >= 0 && VaultRef.value.desiredVaultNFTs.length < 1)\n            {\n              setModalContent(\"There was a problem\", \"You must move at least 1 NFT to the staking wallet. To do so, click the NFT then click the right arrow then hit Start Staking!\" , \"modal-bad\", true, false);\n            }\n            else\n            {\n              await VaultRef.value.moveNFTsOnChain();                \n              hideModal();\n            }             \n          }\n          await fetchFarmer();        \n      }\n      catch(ex: unknown)\n      {      \n        hideModal();\n        let message = 'Unknown Error: Please try again. If the problem continues, please reach out to the site admin'\n        if (ex instanceof Error) {\n          message = ex.message;\n          if(message.includes(\"0x179a\"))\n          {\n           message = \"Minimum staking time not reached. \";\n          }\n          if(message.includes(\"0x1785\"))\n          {\n           message = \"Must have at least 1 NFT staked in the Vault. \";\n          }\n          if(message.includes(\"0x1784\"))\n          {\n           message = \"Vault is Locked. Please try again after the minimum staking peroid has completed \";\n          }\n           \n           showModal();\n           setModalContent(\"There was a problem\", message , \"modal-bad\", true, false);\n        }\n      }\n      selectedNFTs.value = [];\n    };\n\n    const endStaking = async (finalize:boolean) => {\n      try\n      {\n        showModal();\n        setModalContent(\"Submitting Transactions.\", \"Please Wait. Transaction in Progress\", \"modal-neutral\", false, true);\n\n          await gf.unstakeWallet(new PublicKey(farm.value!));\n          await fetchFarmer();\n\n        hideModal();\n      }\n      catch(ex: unknown)\n      {      \n        let message = 'Unknown Error: Please try again. If the problem continues, please reach out to the site admin'\n        if (ex instanceof Error) {\n          message = ex.message;\n          if(message.includes(\"0x179a\"))\n          {\n           message = \"Minimum staking time not reached. \";\n          }\n           showModal();\n           setModalContent(\"There was a problem\", message , \"modal-bad\", true, false);\n        }\n      }\n      selectedNFTs.value = [];\n\n      if(finalize)\n        endStaking(false);\n    };\n\n    \n\n    const claim = async () => {\n      await gf.claimWallet(\n        new PublicKey(farm.value!),\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\n      );\n      await fetchFarmer();\n    };\n\n    const handleRefreshFarmer = async () => {\n      await gf.refreshFarmerWallet(\n        new PublicKey(farm!),\n        new PublicKey(farmerIdentity!)\n          );\n    };\n\n    // --------------------------------------- adding extra gem\n    const selectedNFTs = ref<INFT[]>([]);\n\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n      widthdrawNFTs.value = (VaultRef.value.currentVaultNFTs.length - VaultRef.value.desiredVaultNFTs.length> 0 )\n      \n      console.debug(`selected ${newSelectedNFTs.length} NFTs`);\n      selectedNFTs.value = newSelectedNFTs; \n    };\n\n    const handleNewSelectedVaultNFT = (newSelectedNFTs: INFT[]) => {\n      widthdrawNFTs.value = (VaultRef.value.currentVaultNFTs.length - VaultRef.value.desiredVaultNFTs.length> 0 )\n      \n      console.debug(`selected ${newSelectedNFTs.length} NFTs`);\n      selectedNFTs.value = newSelectedNFTs;\n    };\n\n    const addSingleGem = async (\n      gemMint: PublicKey,\n      gemSource: PublicKey,\n      creator: PublicKey\n    ) => {\n      await gf.flashDepositWallet(\n        new PublicKey(farm.value!),\n        '1',\n        gemMint,\n        gemSource,\n        creator\n      );\n      await fetchFarmer();\n    };\n\n    const addGems = async () => {\n       try\n      {\n       showModal();\n        setModalContent(\"Submitting Transactions.\", \"Please Wait. Transaction in Progress\", \"modal-neutral\", false, true);\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const creator = new PublicKey(\n            //todo currently simply taking the 1st creator\n            (nft.onchainMetadata as any).data.creators[0].address\n          );\n          console.debug('creator is', creator.toBase58());\n\n          addSingleGem(nft.mint, nft.pubkey!, creator);\n        })\n      );\n      console.debug(\n        `added another ${selectedNFTs.value.length} gems into staking vault`\n      );\n       await VaultRef.value.moveNFTsOnChain();\n       hideModal();\n      }\n      catch(ex: unknown)\n      {      \n        let message = 'Unknown Error: Please try again. If the problem continues, please reach out to the site admin'\n        if (ex instanceof Error) {\n          message = ex.message;\n          if(message.includes(\"0x179a\"))\n          {\n           message = \"Minimum staking time not reached. \";\n          }\n           showModal();\n           setModalContent(\"There was a problem\", message , \"modal-bad\", true, false);\n        }\n      }     \n    };\n    \n\n    return {\n      wallet,\n      farm,\n      farmAcc,\n      farmer: farmerIdentity,\n      farmerAcc,\n      farmerState,\n      availableA,\n      availableB,\n      initFarmer,\n      beginStaking,\n      endStaking,\n      claim,\n      handleRefreshFarmer,\n      selectedNFTs,\n      handleNewSelectedNFT,\n      handleNewSelectedVaultNFT,\n      addGems,\n      VaultRef,\n      modalActive, \n      toggleModal,\n      showModal,\n      hideModal,\n      setModalContent,\n      modalGood,\n      modalBad,\n      modalNeutral,\n      modalShowClosebutton,\n      modalShowWheel,\n      ModalMessage,\n      ModalHeader,\n      accruedReward,\n      paidOutReward,\n      fixedRate,\n      estFixedRate,\n      widthdrawNFTs,\n      totalAccounts,\n      totalStakedAccounts,\n      totalNFTsStaked,\n      totalNFTs,\n      farmerbeginStakingTs,\n      estRewards\n    };\n  },\n});\n"],"sourceRoot":""}]}