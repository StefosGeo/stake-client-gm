{"remainingRequest":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js!/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js??ref--14-2!/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue","mtime":1651784671825},{"path":"/home/george/projects/gem-farm-chimps-v2/babel.config.js","mtime":1651784671821},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js","mtime":1648666880284},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js","mtime":1648666885109},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js","mtime":1648666889180}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport NFTGrid from '@/components/gem-bank/NFTGrid.vue';\nimport ArrowButton from '@/components/ArrowButton.vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport {\n  getNFTMetadataForMany,\n  getNFTsByOwner,\n  INFT,\n} from '@/common/web3/NFTget';\nimport { initGemBank } from '@/common/gem-bank';\nimport { PublicKey } from '@solana/web3.js';\nimport { getListDiffBasedOnMints, removeManyFromList } from '@/common/util';\nimport { BN } from '@project-serum/anchor';\nimport { parseDate } from '@/common/util';\nimport VueCountdown from '@chenfengyuan/vue-countdown';\n\nexport default defineComponent({\n  inheritAttrs: false,\n  components: { ArrowButton, NFTGrid, VueCountdown},\n  props: {\n    vault: String,    \n    farmerAcc: { type: Object}\n  },\n  emits: ['selected-wallet-nft','selected-vault-nft'],\n  \n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    // --------------------------------------- state\n\n    //current walet/vault state\n    const currentWalletNFTs = ref<INFT[]>([]);\n    const currentVaultNFTs = ref<INFT[]>([]);\n    //selected but not yet moved over in FE\n    const selectedWalletNFTs = ref<INFT[]>([]);\n    const selectedVaultNFTs = ref<INFT[]>([]);\n    //moved over in FE but not yet onchain\n    const desiredWalletNFTs = ref<INFT[]>([]);\n    const desiredVaultNFTs = ref<INFT[]>([]);\n    //moved over onchain\n    const toWalletNFTs = ref<INFT[]>([]);\n    const toVaultNFTs = ref<INFT[]>([]);\n\n    // --------------------------------------- populate initial nfts\n\n    const populateWalletNFTs = async () => {\n      // zero out to begin with\n      currentWalletNFTs.value = [];\n      selectedWalletNFTs.value = [];\n      desiredWalletNFTs.value = [];\n      \n      if (getWallet()) {\n        currentWalletNFTs.value = await getNFTsByOwner(\n          getWallet()!.publicKey!,\n          getConnection()\n        );\n        desiredWalletNFTs.value = [...currentWalletNFTs.value];\n      }\n    };\n  \n    const populateVaultNFTs = async () => {\n      // zero out to begin with\n      currentVaultNFTs.value = [];\n      selectedVaultNFTs.value = [];\n      desiredVaultNFTs.value = [];\n\n      const foundGDRs = await gb.fetchAllGdrPDAs(vault.value);\n      if (foundGDRs && foundGDRs.length) {\n        gdrs.value = foundGDRs;\n        console.debug(`found a total of ${foundGDRs.length} gdrs`);\n\n        const mints = foundGDRs.map((gdr: any) => {\n          return { mint: gdr.account.gemMint };\n        });\n        currentVaultNFTs.value = await getNFTMetadataForMany(\n          mints,\n          getConnection()\n        );\n        desiredVaultNFTs.value = [...currentVaultNFTs.value];\n        console.debug(\n          `populated a total of ${currentVaultNFTs.value.length} vault NFTs`\n        );\n      }\n    };\n\n    const updateVaultState = async () => {\n      vaultAcc.value = await gb.fetchVaultAcc(vault.value)\n      console.debug(\"vault locked\"+ vaultAcc.value.locked);\n      bank.value = vaultAcc.value.bank;\n      vaultLocked.value = vaultAcc.value.locked;\n    };\n\n    \n    watch([wallet, cluster], async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n    // program to display a text using setInterval method\n    onMounted(async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //prep vault + bank variables\n      vault.value = new PublicKey(props.vault!);\n      await updateVaultState();\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n\n    // --------------------------------------- moving nfts\n\n    const handleWalletSelected = (e: any) => {\n      if (e.selected) {\n        selectedWalletNFTs.value.push(e.nft);\n      } else {\n        const index = selectedWalletNFTs.value.indexOf(e.nft);\n        selectedWalletNFTs.value.splice(index, 1);\n      }\n      ctx.emit('selected-wallet-nft', selectedWalletNFTs.value);\n    };\n\n    const handleVaultSelected = (e: any) => {\n      if (e.selected) {\n        selectedVaultNFTs.value.push(e.nft);\n      } else {\n        const index = selectedVaultNFTs.value.indexOf(e.nft);\n        selectedVaultNFTs.value.splice(index, 1);\n      }\n      ctx.emit('selected-vault-nft', selectedVaultNFTs.value);\n    };\n\n    const moveNFTsFE = (moveLeft: boolean) => {\n      if (moveLeft) {        \n        //push selected vault nfts into desired wallet\n        desiredWalletNFTs.value.push(...selectedVaultNFTs.value);\n        //remove selected vault nfts from desired vault\n        removeManyFromList(selectedVaultNFTs.value, desiredVaultNFTs.value);\n        //empty selection list\n        selectedVaultNFTs.value = [];  \n        \n        ctx.emit('selected-wallet-nft', selectedVaultNFTs.value);\n              \n      } else {\n        //push selected wallet nfts into desired vault\n        desiredVaultNFTs.value.push(...selectedWalletNFTs.value);\n        //remove selected wallet nfts from desired wallet\n        removeManyFromList(selectedWalletNFTs.value, desiredWalletNFTs.value);\n        //empty selected walelt\n        selectedWalletNFTs.value = [];        \n        ctx.emit('selected-vault-nft', selectedVaultNFTs.value);\n      }\n    };\n\n    //todo jam into single tx\n    const moveNFTsOnChain = async () => {\n      for (const nft of toVaultNFTs.value) {\n        console.debug(nft);\n        const creator = new PublicKey(\n          //todo currently simply taking the 1st creator\n          (nft.onchainMetadata as any).data.creators[0].address\n        );\n        console.debug('creator is', creator.toBase58());\n        await depositGem(nft.mint, creator, nft.pubkey!);\n      }\n      for (const nft of toWalletNFTs.value) {\n        await withdrawGem(nft.mint);\n      }\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    };\n\n    //to vault = vault desired - vault current\n    watch(\n      desiredVaultNFTs,\n      () => {\n        toVaultNFTs.value = getListDiffBasedOnMints(\n          desiredVaultNFTs.value,\n          currentVaultNFTs.value\n        );\n        console.debug('to vault nfts are', toVaultNFTs.value);\n      },\n      { deep: true }\n    );\n\n    //to wallet = wallet desired - wallet current\n    watch(\n      desiredWalletNFTs,\n      () => {\n        toWalletNFTs.value = getListDiffBasedOnMints(\n          desiredWalletNFTs.value,\n          currentWalletNFTs.value\n        );\n        console.debug('to wallet nfts are', toWalletNFTs.value); \n      },\n      { deep: true }\n    );\n\n    // --------------------------------------- gem bank\n\n    let gb: any;\n    const bank = ref<PublicKey>();\n    const vault = ref<PublicKey>();\n    const vaultAcc = ref<any>();\n    const gdrs = ref<PublicKey[]>([]);\n    const vaultLocked = ref<boolean>(false);\n\n    const depositGem = async (\n      mint: PublicKey,\n      creator: PublicKey,\n      source: PublicKey\n    ) => {\n      const { txSig } = await gb.depositGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint,\n        source,\n        creator\n      );\n      console.log('deposit done', txSig);\n    };\n\n    const withdrawGem = async (mint: PublicKey) => {\n      const { txSig } = await gb.withdrawGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint\n      );\n      console.log('withdrawal done', txSig);\n    };\n\n    // --------------------------------------- return\n\n    return {\n      wallet,\n      desiredWalletNFTs,\n      desiredVaultNFTs,\n      currentWalletNFTs,\n      currentVaultNFTs,\n      toVaultNFTs, \n      toWalletNFTs,\n      handleWalletSelected,\n      handleVaultSelected,\n      moveNFTsFE,\n      moveNFTsOnChain,\n      parseDate,\n      bank,\n      // eslint-disable-next-line vue/no-dupe-keys\n      vault,\n      vaultLocked,\n    };\n  },\n});\n"],"sourceRoot":""}]}