{"remainingRequest":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js!/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js??ref--14-2!/home/george/projects/gem-farm-chimps-v2/src/common/web3/NFTget.ts","dependencies":[{"path":"/home/george/projects/gem-farm-chimps-v2/src/common/web3/NFTget.ts","mtime":1651784671825},{"path":"/home/george/projects/gem-farm-chimps-v2/babel.config.js","mtime":1651784671821},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js","mtime":1648666880284},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js","mtime":1648666885109}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/george/projects/gem-farm-chimps-v2/src/common/web3/NFTget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport axios from 'axios';\nimport { programs } from '@metaplex/js';\nconst fs = require('fs');\n\nconst {\n  metadata: { Metadata },\n} = programs;\n\nexport interface INFT {\n  pubkey?: PublicKey;\n  mint: PublicKey;\n  onchainMetadata: unknown;\n  externalMetadata: unknown;\n}\n\nasync function getTokensByOwner(owner: PublicKey, conn: Connection) {\n  const tokens = await conn.getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n  let te = tokens.value;\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\n  return tokens.value\n    .filter((t) => {\n      const amount = t.account.data.parsed.info.tokenAmount;\n      return amount.decimals === 0 && amount.uiAmount === 1;\n    })\n    .map((t) => {\n      return { pubkey: t.pubkey, mint: t.account.data.parsed.info.mint };\n    });\n}\n\nasync function getNFTMetadata(\n  mint: string,\n  conn: Connection,\n  pubkey?: string,\n  attempt: number = -1\n): Promise<INFT | undefined> {\n  // console.log('Pulling metadata for:', mint);\n  try {\n    try{\n    let onchainMetadata :any = {};\n    let externalMetadata  :any = {};\n    let filepath = \"/cache/\" + mint + \"/a.json\";\n    let response = await fetch(filepath); \n    let nftdata = await response.json(); \n    \n    onchainMetadata.data = {symbol: nftdata.metadata.symbol, name: nftdata.metadata.name, creators: nftdata.tokenData.creators}\n    externalMetadata.image = \"/cache/\" + mint + \"/c.png\";\n    \n    return {\n      pubkey: pubkey ? new PublicKey(pubkey) : undefined,\n      mint: new PublicKey(mint),\n      onchainMetadata,\n      externalMetadata,\n    };\n  } catch (e) {   \n      console.debug(e);\n      console.log(`failed to pull metadata for token ${mint}`);    \n  }\n    const metadataPDA = await Metadata.getPDA(mint);\n    const onchainMetadata = (await Metadata.load(conn, metadataPDA)).data;\n    let externalMetadata  :any;\n   \n    if(onchainMetadata.data.symbol.toLowerCase() == \"luxr\" || onchainMetadata.data.symbol.toLowerCase() == \"luxe\")\n    {\n      externalMetadata = (await axios.get(onchainMetadata.data.uri)).data;\n    }\n\n  return {\n    pubkey: pubkey ? new PublicKey(pubkey) : undefined,\n    mint: new PublicKey(mint),\n    onchainMetadata,\n    externalMetadata,\n  };\n} catch (e) {   \n  console.debug(e);\n  console.log(`failed to pull metadata for token ${mint}`);    \n}\n}\n\nexport async function getNFTMetadataForMany(\n  tokens: any[],\n  conn: Connection\n): Promise<INFT[]> {\n  const promises: Promise<INFT | undefined>[] = [];  \n  tokens.forEach((t) => promises.push(getNFTMetadata(t.mint, conn, t.pubkey)));\n\n  let nfts_temp : { [key: string]: any } = {};\n  nfts_temp = (await Promise.all(promises)).filter((n) => !!n);\n \n  let tok=[];\n  for( let nft in nfts_temp)\n  {\n    if(nfts_temp[nft].onchainMetadata?.data?.creators?.length > 0)\n    {\n      let address =  nfts_temp[nft].onchainMetadata.data.creators[0]?.address || \" \";\n      if(address == '7HdtUewmjpFnE8SKhZDYGCKmL75ZWUxJp6xa1HrmJww8'|| address == 'AGDBeUaKReqE3DdtWq6J9TRAarScBRhGJ77cD82wLNvD' || address == '5gx13mAde8kjx2aevhceBJtiPDNo78WppFzd9RdVN5ch' )\n        tok.push(nfts_temp[nft]);\n    }\n  }\n  const nfts = tok\n  \n  console.log(`found metadata matching${nfts.length} tokens : filtered ${nfts_temp.length - nfts.length}`);\n\n  return nfts as INFT[];\n}\n\nexport async function getNFTsByOwner(\n  owner: PublicKey,\n  conn: Connection\n): Promise<INFT[]> {\n  const tokens = await getTokensByOwner(owner, conn);\n  console.debug(`found ${tokens.length} tokens`);\n\n  return await getNFTMetadataForMany(tokens, conn);\n}\n"],"sourceRoot":""}]}