{"remainingRequest":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js!/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js??ref--14-2!/home/george/projects/gem-farm-chimps-v2/src/common/gem-farm/index.ts","dependencies":[{"path":"/home/george/projects/gem-farm-chimps-v2/src/common/gem-farm/index.ts","mtime":1651784671825},{"path":"/home/george/projects/gem-farm-chimps-v2/babel.config.js","mtime":1651784671821},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js","mtime":1648666880284},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js","mtime":1648666885109}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/george/projects/gem-farm-chimps-v2/src/common/gem-farm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { BN, Idl } from '@project-serum/anchor';\nimport { createFakeWallet } from '@/common/gem-bank';\nimport {\n  GemFarmClient,\n  FarmConfig,\n  VariableRateConfig,\n  FixedRateConfig,\n  WhitelistType,\n  findWhitelistProofPDA,\n  GEM_FARM_PROG_ID,\n  GEM_BANK_PROG_ID,\n} from '@gemworks/gem-farm-ts';\nimport { programs } from '@metaplex/js';\n\nexport async function initGemFarm(\n  conn: Connection,\n  wallet?: SignerWalletAdapter\n) {\n  const walletToUse = wallet ?? createFakeWallet();\n  const farmIdl = await (await fetch('gem_farm.json')).json();\n  const bankIdl = await (await fetch('gem_bank.json')).json();\n  return new GemFarm(conn, walletToUse as any, farmIdl, bankIdl);\n}\n\nexport class GemFarm extends GemFarmClient {\n  constructor(conn: Connection, wallet: any, farmIdl: Idl, bankIdl: Idl) {\n    super(conn, wallet, farmIdl, GEM_FARM_PROG_ID, bankIdl, GEM_BANK_PROG_ID);\n  }\n\n  async initFarmWallet(\n    rewardAMint: PublicKey,\n    rewardAType: any,\n    rewardBMint: PublicKey,\n    rewardBType: any,\n    farmConfig: FarmConfig\n  ) {\n    const farm = Keypair.generate();\n    const bank = Keypair.generate();\n\n    const result = await this.initFarm(\n      farm,\n      this.wallet.publicKey,\n      this.wallet.publicKey,\n      bank,\n      rewardAMint,\n      rewardAType,\n      rewardBMint,\n      rewardBType,\n      farmConfig\n    );\n\n    console.log('new farm started!', farm.publicKey.toBase58());\n    console.log('bank is:', bank.publicKey.toBase58());\n\n    return { farm, bank, ...result };\n  }\n\n  async updateFarmWallet(\n    farm: PublicKey,\n    newConfig?: FarmConfig,\n    newManager?: PublicKey\n  ) {\n    const result = await this.updateFarm(\n      farm,\n      this.wallet.publicKey,\n      newConfig,\n      newManager\n    );\n\n    console.log('updated the farm');\n\n    return result;\n  }\n\n  async authorizeFunderWallet(farm: PublicKey, funder: PublicKey) {\n    const result = await this.authorizeFunder(\n      farm,\n      this.wallet.publicKey,\n      funder\n    );\n\n    console.log('authorized funder', funder.toBase58());\n\n    return result;\n  }\n\n  async deauthorizeFunderWallet(farm: PublicKey, funder: PublicKey) {\n    const result = await this.deauthorizeFunder(\n      farm,\n      this.wallet.publicKey,\n      funder\n    );\n\n    console.log('DEauthorized funder', funder.toBase58());\n\n    return result;\n  }\n\n  async fundVariableRewardWallet(\n    farm: PublicKey,\n    rewardMint: PublicKey,\n    amount: string,\n    duration: string\n  ) {\n    const rewardSource = await this.findATA(rewardMint, this.wallet.publicKey);\n\n    const config: VariableRateConfig = {\n      amount: new BN(amount),\n      durationSec: new BN(duration),\n    };\n\n    const result = this.fundReward(\n      farm,\n      rewardMint,\n      this.wallet.publicKey,\n      rewardSource,\n      config\n    );\n\n    console.log('funded variable reward with mint:', rewardMint.toBase58());\n\n    return result;\n  }\n\n  async fundFixedRewardWallet(\n    farm: PublicKey,\n    rewardMint: PublicKey,\n    amount: string,\n    duration: string,\n    baseRate: string,\n    denominator: string,\n    t1RewardRate?: string,\n    t1RequiredTenure?: string,\n    t2RewardRate?: string,\n    t2RequiredTenure?: string,\n    t3RewardRate?: string,\n    t3RequiredTenure?: string\n  ) {\n    const rewardSource = await this.findATA(rewardMint, this.wallet.publicKey);\n\n    const config: FixedRateConfig = {\n      schedule: {\n        baseRate: new BN(baseRate),\n        tier1: t1RewardRate\n          ? {\n              rewardRate: new BN(t1RewardRate),\n              requiredTenure: new BN(t1RequiredTenure!),\n            }\n          : null,\n        tier2: t2RewardRate\n          ? {\n              rewardRate: new BN(t2RewardRate),\n              requiredTenure: new BN(t2RequiredTenure!),\n            }\n          : null,\n        tier3: t3RewardRate\n          ? {\n              rewardRate: new BN(t3RewardRate),\n              requiredTenure: new BN(t3RequiredTenure!),\n            }\n          : null,\n        denominator: new BN(denominator),\n      },\n      amount: new BN(amount),\n      durationSec: new BN(duration),\n    };\n\n    const result = await this.fundReward(\n      farm,\n      rewardMint,\n      this.wallet.publicKey,\n      rewardSource,\n      undefined,\n      config\n    );\n\n    console.log('funded fixed reward with mint:', rewardMint.toBase58());\n\n    return result;\n  }\n\n  async cancelRewardWallet(farm: PublicKey, rewardMint: PublicKey) {\n    const result = await this.cancelReward(\n      farm,\n      this.wallet.publicKey,\n      rewardMint,\n      this.wallet.publicKey\n    );\n\n    console.log('cancelled reward', rewardMint.toBase58());\n\n    return result;\n  }\n\n  async lockRewardWallet(farm: PublicKey, rewardMint: PublicKey) {\n    const result = await this.lockReward(\n      farm,\n      this.wallet.publicKey,\n      rewardMint\n    );\n\n    console.log('locked reward', rewardMint.toBase58());\n\n    return result;\n  }\n\n  async refreshFarmerWallet(farm: PublicKey, farmerIdentity: PublicKey) {\n    const result = await this.refreshFarmer(farm, farmerIdentity);\n\n    console.log('refreshed farmer', farmerIdentity.toBase58());\n\n    return result;\n  }\n\n  async treasuryPayoutWallet(\n    farm: PublicKey,\n    destination: PublicKey,\n    lamports: string\n  ) {\n    const result = await this.payoutFromTreasury(\n      farm,\n      this.wallet.publicKey,\n      destination,\n      new BN(lamports)\n    );\n\n    console.log('paid out from treasury', lamports);\n\n    return result;\n  }\n\n  async initFarmerWallet(farm: PublicKey) {\n    const result = await this.initFarmer(\n      farm,\n      this.wallet.publicKey,\n      this.wallet.publicKey\n    );\n\n    console.log('initialized new farmer', this.wallet.publicKey.toBase58());\n\n    return result;\n  }\n\n  async stakeWallet(farm: PublicKey) {\n    const result = await this.stake(farm, this.wallet.publicKey);\n\n    console.log('begun staking for farmer', this.wallet.publicKey.toBase58());\n\n    return result;\n  }\n\n  async unstakeWallet(farm: PublicKey) {\n    const result = await this.unstake(farm, this.wallet.publicKey);\n\n    console.log('ended staking for farmer', this.wallet.publicKey.toBase58());\n\n    return result;\n  }\n\n  async claimWallet(\n    farm: PublicKey,\n    rewardAMint: PublicKey,\n    rewardBMint: PublicKey\n  ) {\n    const result = await this.claim(\n      farm,\n      this.wallet.publicKey,\n      rewardAMint,\n      rewardBMint\n    );\n\n    console.log('claimed rewards for farmer', this.wallet.publicKey.toBase58());\n\n    return result;\n  }\n\n  async flashDepositWallet(\n    farm: PublicKey,\n    gemAmount: string,\n    gemMint: PublicKey,\n    gemSource: PublicKey,\n    creator: PublicKey\n  ) {\n    const farmAcc = await this.fetchFarmAcc(farm);\n    const bank = farmAcc.bank;\n\n    const [mintProof, bump] = await findWhitelistProofPDA(bank, gemMint);\n    const [creatorProof, bump2] = await findWhitelistProofPDA(bank, creator);\n    const metadata = await programs.metadata.Metadata.getPDA(gemMint);\n\n    const result = await this.flashDeposit(\n      farm,\n      this.wallet.publicKey,\n      new BN(gemAmount),\n      gemMint,\n      gemSource,\n      mintProof,\n      metadata,\n      creatorProof\n    );\n\n    console.log('added extra gem for farmer', this.wallet.publicKey.toBase58());\n\n    return result;\n  }\n\n  async addToBankWhitelistWallet(\n    farm: PublicKey,\n    addressToWhitelist: PublicKey,\n    whitelistType: WhitelistType\n  ) {\n    const result = await this.addToBankWhitelist(\n      farm,\n      this.wallet.publicKey,\n      addressToWhitelist,\n      whitelistType\n    );\n\n    console.log(`${addressToWhitelist.toBase58()} added to whitelist`);\n\n    return result;\n  }\n\n  async removeFromBankWhitelistWallet(\n    farm: PublicKey,\n    addressToRemove: PublicKey\n  ) {\n    const result = await this.removeFromBankWhitelist(\n      farm,\n      this.wallet.publicKey,\n      addressToRemove\n    );\n\n    console.log(`${addressToRemove.toBase58()} removed from whitelist`);\n\n    return result;\n  }\n}\n"],"sourceRoot":""}]}