{"remainingRequest":"/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue?vue&type=template&id=0ef0214d&ts=true","dependencies":[{"path":"/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue","mtime":1651784671825},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/babel-loader/lib/index.js","mtime":1648666880284},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/ts-loader/index.js","mtime":1648666885109},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1648666889180},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/cache-loader/dist/cjs.js","mtime":1648666880328},{"path":"/home/george/projects/gem-farm-chimps-v2/node_modules/vue-loader-v16/dist/index.js","mtime":1648666889180}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPCEtLWNvbnRyb2wgYnV0dG9ucy0tPgogIDxkaXYgY2xhc3M9Im1iLTEwIGZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIj4KICAgIDwhLS0gPGJ1dHRvbgogICAgICB2LWlmPSIKICAgICAgICAodG9XYWxsZXRORlRzICYmIHRvV2FsbGV0TkZUcy5sZW5ndGgpIHx8CiAgICAgICAgKHRvVmF1bHRORlRzICYmIHRvVmF1bHRORlRzLmxlbmd0aCkKICAgICAgIgogICAgICBjbGFzcz0iZW5hYmxlZC1idXR0b24gbmVzLWJ0biBodVZqaVUgaXMtc3VjY2VzcyB1eGJ1dHRvbmxlZnQiCiAgICAgIEBjbGljaz0ibW92ZU5GVHNPbkNoYWluIgogICAgPgogICAgICBNb3ZlIE5GVHMKICAgIDwvYnV0dG9uPiAtLT4KICAgIDxzbG90IC8+CiAgPC9kaXY+CgogIDwhLS13YWxsZXQgKyB2YXVsdCB2aWV3LS0+CiAgPGRpdiBjbGFzcz0iZmxleCBpdGVtcy1zdHJldGNoIj4KICAgIDwhLS1sZWZ0LS0+CiAgICA8TkZUR3JpZAogICAgICB0aXRsZT0iWW91ciB3YWxsZXQiCiAgICAgIGNsYXNzPSJmbGV4LTEgaHVWamlVIgogICAgICA6bmZ0cz0iZGVzaXJlZFdhbGxldE5GVHMiCiAgICAgIEBzZWxlY3RlZD0iaGFuZGxlV2FsbGV0U2VsZWN0ZWQiCiAgICAvPgoKICAgIDwhLS1taWQtLT4KICAgIDxkaXYgY2xhc3M9Im0tMiBmbGV4IGZsZXgtY29sIj4KICAgICAgPEFycm93QnV0dG9uCiAgICAgICAgOmRpc2FibGVkPSJ2YXVsdExvY2tlZCIKICAgICAgICBjbGFzcz0ibXktMiAiCiAgICAgICAgQGNsaWNrPSJtb3ZlTkZUc0ZFKGZhbHNlKSIKICAgICAgLz4KICAgICAgPEFycm93QnV0dG9uCiAgICAgICAgOmRpc2FibGVkPSJ2YXVsdExvY2tlZCIKICAgICAgICBjbGFzcz0ibXktMiIKICAgICAgICA6bGVmdD0idHJ1ZSIKICAgICAgICBAY2xpY2s9Im1vdmVORlRzRkUodHJ1ZSkiCiAgICAgIC8+CiAgICA8L2Rpdj4KCiAgICA8IS0tcmlnaHQtLT4KICAgIDxORlRHcmlkCiAgICAgIHYtaWY9ImJhbmsgJiYgdmF1bHQiCiAgICAgIHRpdGxlPSJTdGFraW5nIFdhbGxldCIKICAgICAgY2xhc3M9ImZsZXgtMSBodVZqaVUiCiAgICAgIDpuZnRzPSJkZXNpcmVkVmF1bHRORlRzIgogICAgICBAc2VsZWN0ZWQ9ImhhbmRsZVZhdWx0U2VsZWN0ZWQiCiAgICA+CiAgICAgIDxkaXYKICAgICAgICB2LWlmPSJ2YXVsdExvY2tlZCIKICAgICAgICBjbGFzcz0ibG9ja2VkIGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBhbGlnbi1jZW50ZXIiCiAgICAgID4KICAgICAgPGRpdj4KICAgICAgICA8cCBjbGFzcz0ibXQtMTAiPlNUQUtFRCAtIFZhdWx0IFN0YWtpbmc8L3A+CiAgICAgICAgPHAgdi1pZj0icGFyc2VEYXRlKGZhcm1lckFjYy5taW5TdGFraW5nRW5kc1RzKSA8ICBEYXRlLm5vdygpIiBjbGFzcz0ibXQtMTAiPk5GVHMgTG9ja2VkIGZvcjwvcD4KICAgICAgICA8IS0tIDxwIGNsYXNzPSJtdC0xMCI+RW5kIERhdGU6IHt7IHBhcnNlRGF0ZShmYXJtZXJBY2MubWluU3Rha2luZ0VuZHNUcykgfX08L3A+ICAgICAtLT4KICAgICAgICAKICAgICAgICA8dnVlLWNvdW50ZG93biB2LWlmPSIoTWF0aC5mbG9vcihmYXJtZXJBY2MubWluU3Rha2luZ0VuZHNUcyAtIERhdGUubm93KCkvMTAwMCkgKjEwMDApID4gMCIgOnRpbWU9Ik1hdGguZmxvb3IoZmFybWVyQWNjLm1pblN0YWtpbmdFbmRzVHMgLSBEYXRlLm5vdygpLzEwMDApICoxMDAwIiB2LXNsb3Q9InsgZGF5cywgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMgfSI+CiAgICAgICAgIHt7KHNlY29uZHMgPiAwKSA/ICJUaW1lIFJlbWFpbmluZ++8miIgOiAiIn19e3sgKGRheXMgPiAwKSA/IGRheXMgKyAiIGQgLCIgOiAiIn19IHt7IChob3VycyA+IDApID8gaG91cnMgKyAiIGggLCIgOiAiIn19IHt7IChtaW51dGVzID4gMCkgPyBtaW51dGVzICsgIiBtICwiIDogIiJ9fSB7eyAoc2Vjb25kcyA+IDApID8gc2Vjb25kcyArICIgcyIgOiAiIn19CiAgICAgICAgPC92dWUtY291bnRkb3duPgogICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L05GVEdyaWQ+ICAgICAgICAgIAogIDwvZGl2Pgo="},{"version":3,"sources":["/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue"],"names":[],"mappings":"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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;;QAEtzM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/george/projects/gem-farm-chimps-v2/src/components/gem-bank/Vault.vue","sourceRoot":"","sourcesContent":["<template>\n  <!--control buttons-->\n  <div class=\"mb-10 flex flex-wrap justify-center\">\n    <!-- <button\n      v-if=\"\n        (toWalletNFTs && toWalletNFTs.length) ||\n        (toVaultNFTs && toVaultNFTs.length)\n      \"\n      class=\"enabled-button nes-btn huVjiU is-success uxbuttonleft\"\n      @click=\"moveNFTsOnChain\"\n    >\n      Move NFTs\n    </button> -->\n    <slot />\n  </div>\n\n  <!--wallet + vault view-->\n  <div class=\"flex items-stretch\">\n    <!--left-->\n    <NFTGrid\n      title=\"Your wallet\"\n      class=\"flex-1 huVjiU\"\n      :nfts=\"desiredWalletNFTs\"\n      @selected=\"handleWalletSelected\"\n    />\n\n    <!--mid-->\n    <div class=\"m-2 flex flex-col\">\n      <ArrowButton\n        :disabled=\"vaultLocked\"\n        class=\"my-2 \"\n        @click=\"moveNFTsFE(false)\"\n      />\n      <ArrowButton\n        :disabled=\"vaultLocked\"\n        class=\"my-2\"\n        :left=\"true\"\n        @click=\"moveNFTsFE(true)\"\n      />\n    </div>\n\n    <!--right-->\n    <NFTGrid\n      v-if=\"bank && vault\"\n      title=\"Staking Wallet\"\n      class=\"flex-1 huVjiU\"\n      :nfts=\"desiredVaultNFTs\"\n      @selected=\"handleVaultSelected\"\n    >\n      <div\n        v-if=\"vaultLocked\"\n        class=\"locked flex-col justify-center items-center align-center\"\n      >\n      <div>\n        <p class=\"mt-10\">STAKED - Vault Staking</p>\n        <p v-if=\"parseDate(farmerAcc.minStakingEndsTs) <  Date.now()\" class=\"mt-10\">NFTs Locked for</p>\n        <!-- <p class=\"mt-10\">End Date: {{ parseDate(farmerAcc.minStakingEndsTs) }}</p>     -->\n        \n        <vue-countdown v-if=\"(Math.floor(farmerAcc.minStakingEndsTs - Date.now()/1000) *1000) > 0\" :time=\"Math.floor(farmerAcc.minStakingEndsTs - Date.now()/1000) *1000\" v-slot=\"{ days, hours, minutes, seconds }\">\n         {{(seconds > 0) ? \"Time Remaining：\" : \"\"}}{{ (days > 0) ? days + \" d ,\" : \"\"}} {{ (hours > 0) ? hours + \" h ,\" : \"\"}} {{ (minutes > 0) ? minutes + \" m ,\" : \"\"}} {{ (seconds > 0) ? seconds + \" s\" : \"\"}}\n        </vue-countdown>\n      </div>\n      </div>\n    </NFTGrid>          \n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport NFTGrid from '@/components/gem-bank/NFTGrid.vue';\nimport ArrowButton from '@/components/ArrowButton.vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport {\n  getNFTMetadataForMany,\n  getNFTsByOwner,\n  INFT,\n} from '@/common/web3/NFTget';\nimport { initGemBank } from '@/common/gem-bank';\nimport { PublicKey } from '@solana/web3.js';\nimport { getListDiffBasedOnMints, removeManyFromList } from '@/common/util';\nimport { BN } from '@project-serum/anchor';\nimport { parseDate } from '@/common/util';\nimport VueCountdown from '@chenfengyuan/vue-countdown';\n\nexport default defineComponent({\n  inheritAttrs: false,\n  components: { ArrowButton, NFTGrid, VueCountdown},\n  props: {\n    vault: String,    \n    farmerAcc: { type: Object}\n  },\n  emits: ['selected-wallet-nft','selected-vault-nft'],\n  \n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    // --------------------------------------- state\n\n    //current walet/vault state\n    const currentWalletNFTs = ref<INFT[]>([]);\n    const currentVaultNFTs = ref<INFT[]>([]);\n    //selected but not yet moved over in FE\n    const selectedWalletNFTs = ref<INFT[]>([]);\n    const selectedVaultNFTs = ref<INFT[]>([]);\n    //moved over in FE but not yet onchain\n    const desiredWalletNFTs = ref<INFT[]>([]);\n    const desiredVaultNFTs = ref<INFT[]>([]);\n    //moved over onchain\n    const toWalletNFTs = ref<INFT[]>([]);\n    const toVaultNFTs = ref<INFT[]>([]);\n\n    // --------------------------------------- populate initial nfts\n\n    const populateWalletNFTs = async () => {\n      // zero out to begin with\n      currentWalletNFTs.value = [];\n      selectedWalletNFTs.value = [];\n      desiredWalletNFTs.value = [];\n      \n      if (getWallet()) {\n        currentWalletNFTs.value = await getNFTsByOwner(\n          getWallet()!.publicKey!,\n          getConnection()\n        );\n        desiredWalletNFTs.value = [...currentWalletNFTs.value];\n      }\n    };\n  \n    const populateVaultNFTs = async () => {\n      // zero out to begin with\n      currentVaultNFTs.value = [];\n      selectedVaultNFTs.value = [];\n      desiredVaultNFTs.value = [];\n\n      const foundGDRs = await gb.fetchAllGdrPDAs(vault.value);\n      if (foundGDRs && foundGDRs.length) {\n        gdrs.value = foundGDRs;\n        console.debug(`found a total of ${foundGDRs.length} gdrs`);\n\n        const mints = foundGDRs.map((gdr: any) => {\n          return { mint: gdr.account.gemMint };\n        });\n        currentVaultNFTs.value = await getNFTMetadataForMany(\n          mints,\n          getConnection()\n        );\n        desiredVaultNFTs.value = [...currentVaultNFTs.value];\n        console.debug(\n          `populated a total of ${currentVaultNFTs.value.length} vault NFTs`\n        );\n      }\n    };\n\n    const updateVaultState = async () => {\n      vaultAcc.value = await gb.fetchVaultAcc(vault.value)\n      console.debug(\"vault locked\"+ vaultAcc.value.locked);\n      bank.value = vaultAcc.value.bank;\n      vaultLocked.value = vaultAcc.value.locked;\n    };\n\n    \n    watch([wallet, cluster], async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n    // program to display a text using setInterval method\n    onMounted(async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //prep vault + bank variables\n      vault.value = new PublicKey(props.vault!);\n      await updateVaultState();\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n\n    // --------------------------------------- moving nfts\n\n    const handleWalletSelected = (e: any) => {\n      if (e.selected) {\n        selectedWalletNFTs.value.push(e.nft);\n      } else {\n        const index = selectedWalletNFTs.value.indexOf(e.nft);\n        selectedWalletNFTs.value.splice(index, 1);\n      }\n      ctx.emit('selected-wallet-nft', selectedWalletNFTs.value);\n    };\n\n    const handleVaultSelected = (e: any) => {\n      if (e.selected) {\n        selectedVaultNFTs.value.push(e.nft);\n      } else {\n        const index = selectedVaultNFTs.value.indexOf(e.nft);\n        selectedVaultNFTs.value.splice(index, 1);\n      }\n      ctx.emit('selected-vault-nft', selectedVaultNFTs.value);\n    };\n\n    const moveNFTsFE = (moveLeft: boolean) => {\n      if (moveLeft) {        \n        //push selected vault nfts into desired wallet\n        desiredWalletNFTs.value.push(...selectedVaultNFTs.value);\n        //remove selected vault nfts from desired vault\n        removeManyFromList(selectedVaultNFTs.value, desiredVaultNFTs.value);\n        //empty selection list\n        selectedVaultNFTs.value = [];  \n        \n        ctx.emit('selected-wallet-nft', selectedVaultNFTs.value);\n              \n      } else {\n        //push selected wallet nfts into desired vault\n        desiredVaultNFTs.value.push(...selectedWalletNFTs.value);\n        //remove selected wallet nfts from desired wallet\n        removeManyFromList(selectedWalletNFTs.value, desiredWalletNFTs.value);\n        //empty selected walelt\n        selectedWalletNFTs.value = [];        \n        ctx.emit('selected-vault-nft', selectedVaultNFTs.value);\n      }\n    };\n\n    //todo jam into single tx\n    const moveNFTsOnChain = async () => {\n      for (const nft of toVaultNFTs.value) {\n        console.debug(nft);\n        const creator = new PublicKey(\n          //todo currently simply taking the 1st creator\n          (nft.onchainMetadata as any).data.creators[0].address\n        );\n        console.debug('creator is', creator.toBase58());\n        await depositGem(nft.mint, creator, nft.pubkey!);\n      }\n      for (const nft of toWalletNFTs.value) {\n        await withdrawGem(nft.mint);\n      }\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    };\n\n    //to vault = vault desired - vault current\n    watch(\n      desiredVaultNFTs,\n      () => {\n        toVaultNFTs.value = getListDiffBasedOnMints(\n          desiredVaultNFTs.value,\n          currentVaultNFTs.value\n        );\n        console.debug('to vault nfts are', toVaultNFTs.value);\n      },\n      { deep: true }\n    );\n\n    //to wallet = wallet desired - wallet current\n    watch(\n      desiredWalletNFTs,\n      () => {\n        toWalletNFTs.value = getListDiffBasedOnMints(\n          desiredWalletNFTs.value,\n          currentWalletNFTs.value\n        );\n        console.debug('to wallet nfts are', toWalletNFTs.value); \n      },\n      { deep: true }\n    );\n\n    // --------------------------------------- gem bank\n\n    let gb: any;\n    const bank = ref<PublicKey>();\n    const vault = ref<PublicKey>();\n    const vaultAcc = ref<any>();\n    const gdrs = ref<PublicKey[]>([]);\n    const vaultLocked = ref<boolean>(false);\n\n    const depositGem = async (\n      mint: PublicKey,\n      creator: PublicKey,\n      source: PublicKey\n    ) => {\n      const { txSig } = await gb.depositGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint,\n        source,\n        creator\n      );\n      console.log('deposit done', txSig);\n    };\n\n    const withdrawGem = async (mint: PublicKey) => {\n      const { txSig } = await gb.withdrawGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint\n      );\n      console.log('withdrawal done', txSig);\n    };\n\n    // --------------------------------------- return\n\n    return {\n      wallet,\n      desiredWalletNFTs,\n      desiredVaultNFTs,\n      currentWalletNFTs,\n      currentVaultNFTs,\n      toVaultNFTs, \n      toWalletNFTs,\n      handleWalletSelected,\n      handleVaultSelected,\n      moveNFTsFE,\n      moveNFTsOnChain,\n      parseDate,\n      bank,\n      // eslint-disable-next-line vue/no-dupe-keys\n      vault,\n      vaultLocked,\n    };\n  },\n});\n</script>\n\n<style scoped>\n\n</style>\n"]}]}